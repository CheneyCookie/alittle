<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd">
	
	<!-- 
		配置bean
		class:bean的全类名，通过反射的方式在IOC容器中创建bean,所以要求bean中有无参构造器
		id:标识容器中的bean,id唯一。
	 -->
	<bean id="helloWorld" class="com.spring.bean.HelloWorld">
		<property name="name2" value="Spring"></property>
	</bean>
	
	<!-- 通过构造方法来配置bean的属性 -->
	<bean id="car" class="com.spring.bean.Car">
		<constructor-arg value="Audi" index="0"></constructor-arg>
		<constructor-arg value="ShangHai" index="1"></constructor-arg>
		<constructor-arg value="300000" type="double"></constructor-arg>
	</bean>
	
	<!-- 使用构造器注入属性值可以指定参数的位置和参数的类型，以区分重载的构造器 -->
	<bean id="car2" class="com.spring.bean.Car">
		<constructor-arg value="Audi" type="java.lang.String"></constructor-arg>
		<!-- 如果字面值包含特殊字符，可以使用<![CDATA[]]>包裹起来 -->
		<!-- 属性值也可以使用value子节点进行配置 -->
		<constructor-arg type="java.lang.String">
			<value><![CDATA[<ShangHai^>]]></value>
		</constructor-arg>
		<constructor-arg type="int">
			<value>250</value>
		</constructor-arg>
	</bean>
	
	<bean id="person" class="com.spring.bean.Person">
		<property name="name" value="Tom"></property>
		<property name="age" value="24"></property>
		<!-- <property name="car" ref="car2"></property> -->
		<!-- <property name="car">
			<ref bean="car2"/>
		</property> -->
		<!-- 内部bean,不能被外部引用 -->
		<property name="car">
			<bean class="com.spring.bean.Car" id="car3">
				<constructor-arg value="Ford"></constructor-arg>
				<constructor-arg value="Changan"></constructor-arg>
				<constructor-arg value="200000" type="double"></constructor-arg>
			</bean>
		</property>
		
		<property name="car.maxSpeed" value="260"></property>
	</bean>
	
	<bean id="person2" class="com.spring.bean.Person">
		<constructor-arg value="Jerry"></constructor-arg>
		<constructor-arg value="25"></constructor-arg>
		<!-- <constructor-arg ref="car"></constructor-arg> -->
		<!-- 测试赋值null -->
		<!-- <constructor-arg><null/></constructor-arg> -->
		<constructor-arg ref="car"></constructor-arg>
		<!-- 为级联属性赋值 . 注意属性需要先初始化后才可以为级联属性赋值，否则有异常，和struts2不同  -->
		<property name="car.maxSpeed" value="250"></property>
	</bean>
	
	<!-- 测试如何配置集合属性 -->
	<bean id="person3" class="com.spring.bean.collection.Person">
		<property name="name" value="Mike"></property>
		<property name="age" value="27"></property>
		<property name="cars">
			<!-- 使用list节点为list类型的属性赋值 -->
			<list>
				<ref bean="car"/>
				<ref bean="car2"/>
				<bean class="com.spring.bean.Car">
				<constructor-arg value="Ford"></constructor-arg>
				<constructor-arg value="Changan"></constructor-arg>
				<constructor-arg value="200000" type="double"></constructor-arg>
			</bean>
			</list>
		</property>
	</bean>
	
	<!-- 配置Map属性值 -->
	<bean id="newPerson" class="com.spring.bean.collection.NewPerson">
		<property name="name" value="Rose"></property>
		<property name="age" value="28"></property>
		<property name="cars">
			<!-- 使用map节点以及map的entry子节点配置M类型的成员变量 -->
			<map>
				<entry key="AA" value-ref="car"></entry>
				<entry key="BB" value-ref="car2"></entry>
			</map>
		</property>
	</bean>
	
	<!-- 配置Properties属性值 -->
	<bean id="dataSource" class="com.spring.bean.collection.DataSource">
		<property name="properties">
			<!-- 使用props和prop子节点来为Properties属性赋值 -->
			<props>
				<prop key="user">root</prop>
				<prop key="password">1234</prop>
				<prop key="jdbcUrl">jdbc:mysql///test</prop>
				<prop key="driverClass">com.mysql.jdbc.Driver</prop>
			</props>
		</property>
	</bean>
	
	<!-- 配置独立的集合bean,以供多个bean进行引用,需要导入util命名空间 -->
	<util:list id="cars">
		<ref bean="car"/>
		<ref bean="car2"/>
	</util:list>
	
	<bean id="person4" class="com.spring.bean.collection.Person">
		<property name="name" value="jack"></property>
		<property name="age" value="29"></property>
		<property name="cars" ref="cars"></property>
	</bean>
	
	<!-- 通过p命名空间为bean的属性赋值，需要先倒入p命名空间,相对于传统的配置方式更加简洁 -->
	<bean id="person5" class="com.spring.bean.collection.Person" p:age="30"
	p:name="Queen" p:cars-ref="cars">
	</bean>
</beans>
